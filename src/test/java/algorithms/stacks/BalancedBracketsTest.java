package algorithms.stacks;

import static algorithms.stacks.BalancedBrackets.isBalanced;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

class BalancedBracketsTest {

    @Test
    void testMatchedBracket() {
        assertEquals("YES", isBalanced("{[()]}"));
        assertEquals("YES", isBalanced("{{[[(())]]}}"));
        assertEquals("YES", isBalanced("[{{{()}}}]"));
        assertEquals("YES", isBalanced("[]"));
        assertEquals("YES", isBalanced(""));
        assertEquals("YES", isBalanced("{}{}{}[([]{}{})]{}()()[[[]][()[]]]()[][]{}({}{()}([]{})()){[]}(([([]{{}({{[[()[][]]]}({[][()]{}}{}(){}){}([])}{()()})})]{()([])}[]))([{}()()])([]){}[{()()}][{}[[]()]({{([{}{}[]{()}[]])[(){([])}()][]}}){}()[]][[()]]([](()[][]){(({})[]{}){}}{{{}}})[()]{{((())){()[](){(({{}{}()[{([((()))]())}]{{([])}[()]{{}()}}}()())())}}{()}}[(()(())((({{{{}}[]}})[[{[]((){()}[]([[]])({{([[{}[]]]([{}((){[[](){}{{}}]})[][({{}}()((([[][{}]]))))()[]()][()]{}()()]())([][]{[[{}[]()]]{}[]}))}}))}[]]{}])))({})]}()[{()}][][[]]()[{{(([])){()}}}((){}[])]{[][]([()])}([]){}{(()){{}}}{()}{{{}({[()()()]}(((){[[(())]]{[]}{{}{}[][()][{{[]}{}{}({})[]}[]]}([])({})[[]]()})))}()}(())()(){[]((()[]))}{[][{}]}((())){}{}{}{}{[{}()][{()}][]}{}[{{}[({({}{()})}){{}}{{{{}}}[]}(([]())[])({[]}{}{})]}]{}{[[([])]{((){{{}{[]}}[[(()[()[{[]()[[()]{{[[]]}[[[]{((){})}[{()[]}]{[{()}]}]]}()]}]({{[]{}[]}}[(()[{{}}])()]{{}()}({{}}(({})[])[[{({}{[{[[{{(({{{}}(){{{}}}}()))}()}]{(({{}}){}())()}]()}{}]{}{{[]{}[[(([]))]][]({}[]()())}}})}]]))])]]})}]}"));
        assertEquals("YES", isBalanced("[()][{}()][](){}([{}(())([[{}]])][])[]([][])(){}{{}{[](){}}}()[]({})[{}{{}([{}][])}]"));
        assertEquals("YES", isBalanced("[()][{}[{}[{}]]][]{}[]{}[]{{}({}(){({{}{}[([[]][[]])()]})({}{{}})})}"));
        assertEquals("YES", isBalanced("{}{({{}})}[][{{}}]{}{}(){{}[]}{}([[][{}]]())"));
        assertEquals("YES", isBalanced("(){}[()[][]]{}(())()[[([])][()]{}{}(({}[]()))()[()[{()}]][]]"));
        assertEquals("YES", isBalanced("()([]({}[]){}){}{()}[]{}[]()(()([[]]()))()()()[]()(){{}}()({[{}][]}[[{{}({({({})})})}]])"));
        assertEquals("YES", isBalanced("{()({}[[{}]]()(){[{{}{[[{}]{}((({[]}{}()[])))]((()()))}(()[[[]]])((()[[](({([])()}))[]]))}]})}"));
        assertEquals("YES", isBalanced("()(){{}}[()()]{}{}"));
        assertEquals("YES", isBalanced("{}()([[]])({}){({[][[][[()]]{{}[[]()]}]})}[](())((())[{{}}])"));
        assertEquals("YES", isBalanced("{}(((){}){[]{{()()}}()})[]{{()}{(){()(){}}}}{()}({()(()({}{}()((()((([])){[][{()}{}]})))))})"));
    }

    @Test
    void testNotMatchedBracket() {
        assertEquals("NO", isBalanced("{[(])})"));
        assertEquals("NO", isBalanced("[{{[}}]"));
        assertEquals("NO", isBalanced(")])){}){({)]][[[({]}{{({{]]{{])]]([)](}{([[{[(]}(})([){{])[)]}))]{(([})([}][(}[(){{({][])({({]()(}[[{)][([{{(({}[[]{])(([]){)([[)({}()[(]}}]][)[{[{}{[){[}){{]}{){)([({}}}{{]]}]{]}(]]]}[{(}([((]([({)}][])[){[({))[(]{}){)){]]{((}({]({[]{(})}{][{](][((]}[])}[[][])){[)(])()}}{]{})}){]](]}[)([)})]({)]][[]{}}[]](][}()}][})([))}){){]]]][]}][[}[}{[)[}([)}]())(}(){)](}}}())}}}}{{}(}}{())(([)()))(}([)(())}]}}}]{)()[{)(](])((}][]){])[([]}][(())[][([)()))(}}{){}((){}[])({[(}(}{)(}{)([{]{[[)(}}(])]))[[}{{){[)(])([)[()(}){)[]}][[(){)))[{{{})]))}{([}(([}{{(}(}(}}[(}]}}((]{{][([[){{{}})((}(}{({[{})([}))]{[)){(})}{){}())(({()()]}{({]}]{]}([{}}{))}((]{)})[(}}))})[[{()[[{]]{[{[[{)[}})[[((}]((]][{}]](([([)]]((({{[)]{[(([]]}[]]]){({[}]])[((){{}[{][{[(]]{{[)[}[(}[}[}{([{[)({){[)](){}([({(([(}[(})(]{[{){{)]()(([{(]}[}))])](}(}]]){}}(}{}()[)[)]{}]]([[(({](]]([]{})[({[]([)]({])(((][)[([[{{([][][{)[(][[])(][)}[({(}}()}[{}]}]}[)){}}(([[((}[([[{)]]{(]}}[[(}}{){]{(]({)[())([]{{{[((][))}[{])]])]]]}}[}{}[])(}(]}}]}}"));
        assertEquals("NO", isBalanced("(])[{{{][)[)])(]){(}))[{(})][[{)(}){[(]})[[{}(])}({)(}[[()}{}}]{}{}}()}{({}](]{{[}}(([{]"));
        assertEquals("NO", isBalanced("){[]()})}}]{}[}}})}{]{](]](()][{))])(}]}))(}[}{{)}{[[}[]"));
        assertEquals("NO", isBalanced("}(]}){"));
        assertEquals("NO", isBalanced("((]()(]([({]}({[)){}}[}({[{])(]{()[]}}{)}}]]{({)[}{("));
        assertEquals("NO", isBalanced("[]([{][][)(])}()([}[}(})}])}))]](}{}})[]({{}}))[])(}}[[{]{}]()[(][])}({]{}[[))[[}[}{(]})()){{(]]){]["));
        assertEquals("NO", isBalanced("][[{)())))}[)}}}}[{){}()]([][]){{{{{[)}]]{([{)()][({}[){]({{"));
        assertEquals("NO", isBalanced("{{}("));
    }

}
